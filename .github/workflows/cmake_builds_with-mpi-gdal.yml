# Build CCGL library on native C++11 with GDAL and run test with CMake

name: Build with MPI and GDAL

on:
    push:
        paths-ignore:
    pull_request:
        paths-ignore:
    workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build-linux-ubuntu:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: Checkout TauDEM_ext
      uses: actions/checkout@v2

    - name: Install GDAL
      run: sudo apt-get update && sudo apt-get install -qq gdal-bin libgdal-dev

    - name: Setup MPI (use OpenMPI)
      uses: mpi4py/setup-mpi@v1
      with:
        mpi: openmpi

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -- -j 4

  build-windows:
    runs-on: windows-2019

    steps:
    - name: Checkout TauDEM_ext
      uses: actions/checkout@v2

    - name: Setup MPI (use MS-MPI)
      uses: mpi4py/setup-mpi@v1
      with:
        mpi: msmpi

    - name: Download GDAL
      id: pwshdowngdal
      shell: pwsh
      run: |
        cd ${{github.workspace}}\.github\workflows
        ./download_gdal.ps1 -gdalPath ${{github.workspace}}\gdallib
        Get-ChildItem Env: | Where-Object {$_.Name -Match "^GDAL"} | %{ echo "::set-output name=$($_.Name)::$($_.Value)" }

    - name: Configure CMake
      shell: cmd
      run: |
        cmake -G "Visual Studio 16 2019" -A x64 -B ${{github.workspace}}/build ^
        -DGDAL_ROOT=${{ steps.pwshdowngdal.outputs.GDAL_ROOT }} ^
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      shell: cmd
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -- /m:4

  build-mac:
    runs-on: macos-latest

    steps:
    - name: Checkout TauDEM_ext
      uses: actions/checkout@v2
      
    - name: Setup xcode
      uses: maxim-lobanov/setup-xcode@v1

    - name: Install GDAL
      run: brew list gdal &>/dev/null || brew install gdal

    - name: Setup MPI (use OpenMPI)
      uses: mpi4py/setup-mpi@v1
      with:
        mpi: openmpi

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -- -j 4
